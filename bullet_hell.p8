pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
-- maximum possible number of bugs on the screen
num_of_bugs = 100
-- delay between bugs spawning to stop them being in sync
max_delay = 8
-- how long the player sprite will flash on being hit (in frames)
wobble_duration = 30

function _init()
	player = {}
	player.alive = true
	player.x = 64
	player.y = 64
	player.width = 5
	player.height = 8
	player.hitbox_x = 2
	player.hitbox_y = 0
	player.lives = 3
	player.wobble_time = 0
	player.bob = 1
	player.sprite_x = 8
	player.sprite_y = 17
	time_begin = time()
	
	shake_intensity = 0
	wobble_buffer = 0
	time_t = 0

	bug_types = {normal = 0, fast = 1}
	sides = {top = 0, bottom = 1, left = 2, right = 3}

	delay = 0
	-- use navy for invisible, black is used
	palt(0, false)
	palt(1, true)
	
	init_bugs(num_of_bugs)
end

-- main update function
function _update()	
	if player.hit then
		shake_intensity = 5
		player.hit = false
	end
	update_player()
	
	if player.alive then
		time_alive = flr(time()-time_begin)
	end
	
	time_t = (time_t + 0.001) % 1
	sin_t = sin(time_t)
	-- step down of delay towards next bug spawn
	delay -= (1.5 + sin_t)
	if delay < 0.2 then delay = 0 end
	for i=1, num_of_bugs do
		if (not bugs[i].active) then
			if delay > 0 then
				goto continue
			end
			respawn_bug(i)
			delay = flr(rnd(max_delay))
		else
			move_bug(i)
			if player.alive then
				if detect_collision(i) then
					if player.lives == 1 then 
						sfx(1)
						player.alive = false
					else 
						sfx(0)
						player.lives -= 1
						player.sprite_x += 10
						player.wobble_time = wobble_duration/2
						player.hit = true
					end
				end
			end
		end
		
		if bugs[i].progress > 140 or bugs[i].progress < -12 then
			bugs[i].active = false
		end
		::continue::
	end
end

function _draw()
	cls(1)
	if shake_intensity > 0 then shake() end
		
	for i=1, num_of_bugs do
		draw_bug(i)
	end
	draw_player()
	camera()
	print("sin_t " .. sin_t, 10, 10)
	print("time\nalive: " .. time_alive, 80, 10)
end


function update_player()
	if player.wobble_time > 0 then
			wobble_buffer -= 0.5
	end
	
	if wobble_buffer == -1 then
		player.wobble_time -= 1
		wobble_buffer = 0
	end
	
	if btn(0) or btn(1) or btn(2) or btn(3) then
		player.bob += 1
		if player.bob == 6 then
			sfx(2)
			player.sprite_y -= 1
		end
		if player.bob == 8 then
			player.sprite_y += 1
			player.bob = 1
		end
	end
	
	if (btn(0) and player.x > 0) then player.x -= 1 end
	if (btn(1) and player.x < 120) then player.x += 1 end
	if (btn(2) and player.y > 0) then player.y -= 1 end
	if (btn(3) and player.y < 120) then player.y += 1 end
end


function respawn_bug(index)
	bugs[index].side = flr(rnd(4))
	bugs[index].spawn = flr(rnd(128))
	if flr(rnd(10)) == 0 then
		bugs[index].type = bug_types.fast
	else
		bugs[index].type = bug_types.normal
	end
	bugs[index].active = true
	if bugs[index].side == sides.bottom or bugs[index].side ==sides.right then
	bugs[index].progress = 135
	else
		bugs.progress = -10
	end
end

function init_bugs(num_of_bugs)
	bugs = {}
	
	for i=1,num_of_bugs do
		bug = {}
		add(bugs, bug, i)
		bugs[i].active = false
		bugs[i].side = sides.top
		bugs[i].spawn = 0
		bugs[i].type = bug_types.normal
		bugs[i].progress = -10
		bugs[i].flap_time = -5
	end
end

function move_bug(index)
	if bugs[index].side == sides.left or bugs[index].side==sides.top then
			bugs[index].progress += (bugs[index].type + 1)

	else
			bugs[index].progress -= (bugs[index].type + 1)
	end
end

function detect_collision(index)
		if player.wobble_time > 0 then
			return false
		end
		if bugs[index].side ==sides.left or bugs[index].side==sides.right then 
			bug_x = bugs[index].progress + 1 
			bug_y = bugs[index].spawn
		
		else	
			bug_y = bugs[index].progress + 1 
			bug_x = bugs[index].spawn + 2
		end
		
		if bug_x >= (player.x + player.hitbox_x) and bug_x <= (player.x + player.hitbox_x + player.width) and bug_y >= (player.y + player.hitbox_y) and bug_y <= (player.y + player.hitbox_y + player.height) then
			bugs[index].progress = -10
			bugs[index].spawn = -10
			bugs[index].active = false
			return true
		else
			return false
		end
end


function draw_bug(index)
	if bugs[index].type == bug_types.normal then
		sprite_x = 24
	else
		sprite_x = 27
	end
	
	if bugs[index].side == sides.top or bugs[index].side == sides.bottom then
		sprite_y = 8
	else
		sprite_y = 11
	end
	
	bugs[index].flap_time += 1
	if (bugs[index].flap_time > 0) then
		sprite_x += 6
	end
	if bugs[index].flap_time==5 then
		bugs[index].flap_time = -5
	end
	
	if bugs[index].side == sides.top then flip_y = true else flip_y = false end
	if bugs[index].side == sides.right then flip_x = true else flip_x = false end
	
	if bugs[index].side == sides.left or bugs[index].side == sides.right then
		sspr(sprite_x, sprite_y, 3, 3, bugs[index].progress, bugs[index].spawn, 3, 3, flip_x, flip_y)
	else
		sspr(sprite_x, sprite_y, 3, 3, bugs[index].spawn, bugs[index].progress, 3, 3, flip_x, flip_y)
	end
end


function draw_player()
	
	if player.alive and (player.wobble_time % 2) ==0 then
		sspr(player.sprite_x, player.sprite_y, 10, 10, player.x, player.y)
	end
end

function shake()
 local shake_x=rnd(shake_intensity) - (shake_intensity /2)
 local shake_y=rnd(shake_intensity) - (shake_intensity /2)

 --offset the camera
 camera( shake_x, shake_y )

 --ease shake and return to normal
 shake_intensity *= .5
 if shake_intensity < .3 then shake_intensity = 0 end
end
__gfx__
00000000111118888881111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111888877888811100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111778877887811100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000118778888888881100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000188888888888778100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700888887788878778800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000887887788888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888888888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111ff77ff77ff11110110110110111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111ff70ff07ff11170770710110111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111ffffffffff1111011a17077a711110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111f0ffffff0f11117117171171111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111ff000000ff111000a00000a0011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111ffffffffff11117117171171111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111f11111111f11111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011ff11111111ff1111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000118887781111188778111118711111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000187788888111118888811118811111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000887788778811118877881118871111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000788888888878888888888888888811110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001170ff07111170ff0711177ff07111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011ffffff111177ff7711170ff77111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011f0ff0f1111ffffff111ffffff111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011ff00ff1111f0000f111ff00ff111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011ffffff1111ffffff111f0ff0f111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000300000315005150081500b15008150041500215003100031000310003100031000310002100021002410024100241002410025100251002510026100271002910000100001000010000100001000010000100
000a0000241101f1501b150181501b15018150161501315016150131500f1500c150022500025014200102000d2000b2000a2000720005200022000a200082000520003200002000120000200032000220001200
0002000000000000000000000000000000911017110261101010012100141001a1002310026100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001301714076140751403514025140151401514026140371303013070130211303114041140511405114051140311405114050140661407514045140351404514056140661502016070150211503115041
